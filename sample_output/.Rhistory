install.packages(ggplot2)
install.packages("ggplot2")
y
library(ggplot2)
suffixes <- 5salmtesthits
suffixes <- "5salmtesthits"
j <- 1
suffixes[length(suffixes)]
suffixes[length(suffixes)]
suffixes[length(suffixes)]+2
suffixes <- 0:0
suffixes <- "5salmtesthits"
length(suffixes)
suffixes[j:(j+3)]
suffixes <- 0:0
j <- 1
while(j < (suffixes[length(suffixes)]+2)){
curr_range <- suffixes[j:(j+3)]
if(any(is.na(curr_range))) curr_range <-
as.numeric(na.omit(curr_range))
for(i in curr_range){
if(nchar(i) == 1){
prefix <- "00"
} else if(nchar(i) == 2){
prefix <- "0"
} else{
prefix <- ""
}
system(paste("./forNRgetseqsfromblastdb.sh",paste("try",prefix,i,sep=""),sep=" "), wait = TRUE)
if(i != curr_range[length(curr_range)]) system(paste("blastp -db /1/scratch/blastdb/nr -query", paste("try",prefix,i,"seqs.fna",sep=""), "-out", paste("try",prefix,i,"blast.out",sep=""), "-evalue 0.05 -parse_deflines -num_threads 10 -outfmt '7 qseqid qlen qstart qend length sseqid slen qcovs score bitscore evalue stitle sallseqid salltitles' -soft_masking true -use_sw_tback &"), wait = TRUE)
if(i == curr_range[length(curr_range)]) system(paste("blastp -db /1/scratch/blastdb/nr -query", paste("try",prefix,i,"seqs.fna",sep=""), "-out", paste("try",prefix,i,"blast.out",sep=""), "-evalue 0.05 -parse_deflines -num_threads 10 -outfmt '7 qseqid qlen qstart qend length sseqid slen qcovs score bitscore evalue stitle sallseqid salltitles' -soft_masking true -use_sw_tback;"), wait = TRUE)
}
j <- j + 4
}
suffixes[length(suffixes)]+2
nchar(3)
nchar(alskdfdas)
nchar("alskdfdas")
suffixes <- 000:005
j <-1
suffixes[length(suffixes)]
curr_range <- suffixes[j:(j+3)]
load("~/Documents/scripts/gfcode1.Rdata")
load("~/Documents/thesis/gfcode1.Rdata")
rm(list=ls())
load("~/Documents/scripts/gfcode1.Rdata")
load("~/Documents/thesis/gfcode1.Rdata")
install.packages("indelmiss")
ls
rm(list=ls()) #removes all objects in current R environment
args=commandArgs(trailingOnly=TRUE)
rm(list=ls()) #removes all objects in current R environment
setwd("/Users/ann/Documents/thesis/thesis_git/2017pange_hgt/sample_output")
ls
path=toString("/Users/ann/Documents/thesis/presence_absence_matrix/prot_file/") #path to dir that contians list of files, each name is an accession # and thefile contains all the protein IDs associated with the organism
file.names <- dir(path, pattern='.prots') #gets all file names (which are accession #s ) in path
orgenes <- data.frame()
for (i in 1:length(file.names)){
name <-toString(gsub(".prots$","",file.names[i])) #strips the .prots from the filename
orgenes <- c(orgenes,assign(name,read.table(paste(path,toString(file.names[i]), sep=''), header=FALSE))) #creates a variable whose name is the acc# and which contains a list of all the protIDs for that acc#
}
famstxt <- read.table("/Users/ann/Documents/thesis/thesis_git/2017pange_hgt/sample_output/salmtest_genfamperlout.txt", header=FALSE, sep=' ', fill=TRUE) #read in gene families from txt file
charfams <- sapply(famstxt[,3:ncol(famstxt)], as.character) #converts factors to strings
listcharfam <- split(charfams, seq(nrow(charfams))) # converts dataframe to list of lists
genefamilies<- vector("list", length(listcharfam)) # initializes empty list of lists
for (gf in 1:length(listcharfam)){
tmp <- listcharfam[[gf]]
genefamilies[[gf]] <- tmp[tmp != ""] # filters out empty string from each family
}
presenceAbsence <- matrix(2,nrow=length(orgenes), ncol=length(genefamilies)) #initializes a matrix full of 2's, if there is an error, will show up as 2, not 1 or 0 in final matrix
colnames(presenceAbsence) <- colnames(presenceAbsence, do.NULL=FALSE, prefix="genefam") #set colum names too be genefam1, genefam2 etc. for readability
rnams <- list()
for (i in 1:length(file.names)){
rnams <-c(rnams,toString(gsub(".prots$","",file.names[i]))) # creates a list of accession numbers read into R in part one
}
rownames(presenceAbsence) <- rnams # set the row names of the matrix to be the accession numbers of the orgnisms
for (fam in 1:length(genefamilies)){ # for each gene family
for (org in 1:length(orgenes)){ # for each organism
numberOfMatches<- 0 # number of genes in organism that are also in gene family
for (gene in 1:length(orgenes[[org]])){ # for each gene (protein ID) in the organism
if (as.character(orgenes[[org]][gene]) %in% genefamilies[[fam]]){ # if the gene is in the current family
numberOfMatches<- i+1 # increment
}
}
if (numberOfMatches == 0) { # if no genes are found in the current family
presenceAbsence[org,fam] <- 0
} else { # if >1 genes are founf in the current family
presenceAbsence[org,fam] <- 1
}
}
}
View(presenceAbsence)
View(presenceAbsence)
View(CP016014)
